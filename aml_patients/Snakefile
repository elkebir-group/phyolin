configfile: "config.yaml"


def get_samples(file):
    with open(file) as ifile:
        samples = [sample for sample in ifile.read().split('\n') if len(sample) > 0]
    return samples

rule all:
    input:
          expand("input/{patient}_input.csv",patient=get_samples(config["samples"])),
          expand("phyolin_estimate/{patient}_fp{fp}_predict.out", patient=get_samples(config["samples"]), fp=config['fp'])

rule discretize_counts:
    input:
        ad_file = "read_counts/{patient}_AD.csv",
        dp_file = "read_counts/{patient}_DP.csv"
    params:
        pval= 1e-6,
        alpha_fp= 0.001

    output:
        outfile = "input/{patient}_input.csv",
        loci = "input/{patient}.loci"
    script:
        "discretize_counts.R"
    


rule phyolin:
    input: "input/{patient}_input.csv"
    output: 
        matrix = "phyolin_matrix_output/{patient}_fp{fp}_matrix.csv",
        results= "phyolin_estimate/{patient}_fp{fp}_predict.out"
    params:
        timelimit = 900,
        fn = config['fn']

    benchmark: "benchmark/{patient}_{fp}_phyolin.out"
    log:
        std = "log/{patient}_{fp}_phyolin.log", 
        err = "log/{patient}_{fp}_phyolin.err.log"
    shell:
     "../build/phyolin -input {input} -output {output.matrix} -counts {output.results} "
     " -fp {wildcards.fp} -time {params.timelimit} -fn {params.fn} "
     " > {log.std} 2> {log.err}"